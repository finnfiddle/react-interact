extends ./includes/layout.jade

block navbar
  +navbar
  
block content
  
  .row
    +menu
          
    .col-md-9
      .page-header
        h1 Mutations
        
      p Reading data from the server is an important part of an application but when we want to add interactivity we need to be able to also mutate it.
      
      p Interact gives us the power to perform CRUD operations on our resources defined by our containers by passing a prop 
        code interact
        |  to the wrapped component.
        
      p The 
        code interact
        |  prop exposes a fluent API where resources can be mutated and read using CRUD operations (read, update, create, remove, list).


      h3 Create
      p In the below example a new Todo is created when we click the Add Todo button.
      pre
        code.javascript
          :escape
            import React, { Component } from 'react'
            import { createContainer } from 'react-interact'

            class TodoList extends Component {

              render() {
                return (
                  <div>
                    {this.props.todos.map(todo => `${todo.title}, `)}
                    <a onClick={this.handleAddTodo.bind(this)}>Add Todo</a>
                  </div>
                )
              },

              handleAddTodo() {
                this.props.interact.todos.create({
                  title: 'New Todo',
                })
              },
            }

            export default createContainer(TodoList, {
              todos: '/api/v1/todos',
            })
      
      +space    
      
      
      h3 Update
      p In this example we update/toggle the 
        code done
        |  property of the clicked Todo.
      pre
        code.javascript
          :escape
            import React, { Component } from 'react'
            import { createContainer } from 'react-interact'

            class TodoList extends Component {

              render() {
                return (
                  <ul>
                    {this.props.todos.map(todo => {
                      const onClick = this.handleUpdateTodo.bind(this, {
                        id: todo.id,
                        payload: {
                          done: !todo.done,
                        },
                      })
                      
                      return (
                        <li key={todo.id}>
                          <a onClick={onClick}>{todo.title}</a>
                        </li>
                      )
                    })}
                  </ul>
                )
              },

              handleUpdateTodo({id, payload}) {
                this.props.interact.todos({id}).update(payload)
              },
            }

            export default createContainer(TodoList, {
              todos: '/api/v1/todos',
            })
      
      +space    
      
      
      h3 Remove
      p This example shows how to remove a Todo when we click it.
      pre
        code.javascript
          :escape
            import React, { Component } from 'react'
            import { createContainer } from 'react-interact'

            class TodoList extends Component {

              render() {
                return (
                  <ul>
                    {this.props.todos.map(todo => {
                      const onClick = this.handleRemoveTodo.bind(this, todo.id)
                      
                      return (
                        <li key={todo.id}>
                          <a onClick={onClick}>{todo.title}</a>
                        </li>
                      )
                    })}
                  </ul>
                )
              },

              handleRemoveTodo(id) {
                this.props.interact.todos({id}).remove()
              },
            }

            export default createContainer(TodoList, {
              todos: '/api/v1/todos',
            })
      
      +space    
      
      
      h3 List
      p This example shows an example of typeahead functionality using the 
        code list
        |  method.
      pre
        code.javascript
          :escape
            import React, { Component } from 'react'
            import { createContainer } from 'react-interact'

            class TodoList extends Component {

              render() {
                return (
                  <div>
                    <input onChange={this.handleSearch.bind(this)} />
                    <ul>
                      {this.state.todos.map(todo => (
                        <li key={todo.id}>{todo.title}</li>
                      ))}
                    </ul>
                  </div>
                )
              },
                
              handleSearch(event) {
                this.props.interact
                  .todos({query: {search: event.target.value}})
                  .list((response, collection, done) => {
                    this.setState({todos: response.body})
                    done()
                  })
              },

            }

            export default createContainer(TodoList, {
              todos: '/api/v1/todos',
            })
            
      .callout.callout-info
        h4 Info
        
        p The 
          code list
          |  method will not update the collection that gets passed as a prop to the wrapped component. If you wish to list and update the collection at the same time use the 
          code fetch
          |  method instead.
          
      +space    
          
      h3 TODO: Read
      h3 TODO: Fetch Single
      h3 TODO: Fetch Multiple
      
      +space    
      
      h3 Callbacks
      p What happens when mutating one object has an effect on other items in the collection? If for example we change the position of an item in a list, and on the backend we also update the positions of other items in the list - these other changes would need to be synced with the frontend.
      
      p One way of doing this is sending another network request that retrieves the updated list of items. There are other ways but we will look at this way for illustration purposes.
      
      pre
        code.javascript
          :escape
            import React, { Component } from 'react'
            import { createContainer } from 'react-interact'

            class TodoList extends Component {

              render() {
                return (
                  <ul>
                    {
                      this.props.todos
                        .sort((a, b) => a.position - b.position)
                        .map(todo => {
                          const onClick = this.handleMoveTodoToTop.bind(this, todo)
                          
                          return (
                            <li key={todo.id}>
                              <a onClick={onClick}>{todo.title}</a>
                            </li>
                          )
                        })
                    }
                  </ul>
                )
              },

              handleMoveTodoToTop(todo) {
                this.props.interact.todos({id}).update(
                  {position: 0},
                  (response, collection, updateCollection) => {
                    this.props.interact.todos.fetch()
                  }
                )
              },
            }

            export default createContainer(TodoList, {
              todos: '/api/v1/todos',
            })
            
      +space   
      
      h3 Queries
      p Query strings can also be added to request urls by specifying a query property on the object that is passed to the method that selects the item in the resource. Each key-value pair is mapped to the uri query string using 
        a(href="https://github.com/ljharb/qs" target="_blank") qs
        |  behind the scenes.
      
      pre
        code.javascript
          :escape
            import React, { Component } from 'react'
            import { createContainer } from 'react-interact'

            class TodoList extends Component {

              render() {
                return (
                  <div>
                    <input onChange={this.handleSearch.bind(this)} />
                    <ul>
                      {
                        this.props.todos.map(todo => (
                          <li key={todo.id}>{todo.title}</li>
                        ))
                      }
                    </ul>
                  </div>
                )
              },
              
              handleSearch(event) {
                this.props.interact.todos({id, query: {search: event.target.value}}).fetch()
              },
            }

            export default createContainer(TodoList, {
              todos: '/api/v1/todos',
            })
            
      +space   
       
      
      a.btn.btn-md.btn-primary(href=uri_prefix+"/guides_subresources.html") Next: Subresources
          
      +space    
      +space    
      +space    
