extends ./includes/layout.jade

block content
  
  .row
    +menu
          
    .col-md-9
      .page-header
        h1 Containers
        
      p Containers need to be configured so that they know where and how to send network requests. The second argument to 
        code Interact.createContainer()
        | &nbsp;is an object where each key-value pair corresponds to an API resource.
      p Example:
        
      pre
        code.javascript.
          Interact.createContainer(WrappedComponent, {
            resourceName: {
              base: '/api/v1/resourceName', // base uri prepended to all operation uris
              list: {method: 'GET', uri: ''}, // method and uri for listing items
              create: {method: 'POST', uri: ''}, // method and uri for creating an item
              read: {method: 'GET', uri: '/1'}, // method and uri for reading an item
              update: {method: 'PUT', uri: '/1'}, // method and uri for updating an item
              patch: {method: 'PATCH', uri: '/1'}, // method and uri for patching an item
              remove: {method: 'DELETE', uri: '/1'}, // method and uri for removing an item
              defaultOperation: 'list', // operation that is executed when component mounts
              uid: 'id', // unique identifier key for each item
            },
            ...
          })
          
      .callout.callout-warning 
        h4 Notice that the uri template strings for each operation do not use back-ticks like ES6 template strings, but instead use ordinary single or double quotation marks.
        
      +space
      h4 Defaults / URI shorthand
      p Instead of using an object for each operation config (eg. read, list, update) we can choose to only write the URI string. The operations will use the default HTTP verbs for each. The above could have been written like this:
        
      pre
        code.javascript.
          Interact.createContainer(WrappedComponent, {
            resourceName: {
              base: '/api/v1/resourceName',
              list: '',
              create: '',
              read: '/1',
              update: '/1',
              patch: '/1',
              remove: '/1',
            },
            ...
          })

      +space    
      h4 Dynamic URIs
      p Each operation URI on a resource gets evaluated as a template string. The template string gets passed the 
        code props
        | &nbsp;of the container and the 
        code id
        | &nbsp;for the item when performing a mutation (see the 
        a(href="/guides_mutations.html") Mutations Guide
        | &nbsp; for more info).
      p For example:

      pre
        code.javascript.
          Interact.createContainer(WrappedComponent, {
            resourceName: {
              base: '/api/v1/${props.resourceName}',
              list: '',
              create: '',
              read: '/${id}',
              update: '/${id}',
              patch: '/${id}',
              remove: '/${id}',
            },
            ...
          }))

      +space    
      h4 Item keys/URIs
      p In the above example you'll notice that all operations for individual items (eg. update, remove, read, patch) have the same URI. In this case we can simplify our configuration even further by using an 
        code item
        | &nbsp;key to configure all of the item operations at the same time.
      p For example:

      pre
        code.javascript.
          Interact.createContainer(WrappedComponent, {
            resourceName: {
              base: '/api/v1/${props.resourceName}',
              item: '/${id}',
            },
            ...
          })
          
          
      .callout.callout-info 
        h4 The 
          code create
          | &nbsp;and 
          code list
          | &nbsp;operations use the base URI by default and can be omitted.
        
      .callout.callout-warning 
        h4 Only use the
          code item
          | &nbsp;key if you wish to use the default HTTP verbs for each operation.
        
      +space    
      h4 Resource URIs
      p The previous example can be simplified even further. We can define a resource by only using the base URI string. If we used the following configuration:
       
      pre
        code.javascript.
          Interact.createContainer(WrappedComponent, {
            resourceName: '/api/v1/${props.resourceName}',
            ...
          })
          

      p It would be equivalent to writing the following:

      pre
        code.javascript.
          Interact.createContainer(WrappedComponent, {
            resourceName: {
              base: '/api/v1/${props.resourceName}',
              list: {method: 'GET', uri: ''},
              read: {method: 'GET', uri: '/${id}'},
              create: {method: 'POST', uri: ''},
              update: {method: 'PUT', uri: '/${id}'},
              patch: {method: 'PATCH', uri: '/${id}'},
              remove: {method: 'DELETE', uri: '/${id}'},
              defaultOperation: 'list',
              uid: 'id',
            },
            ...
          })
          
      +space    
      
      a.btn.btn-md.btn-primary(href="/guides_mutations.html") Next: Mutations
          
      +space    
      +space    
      +space    
