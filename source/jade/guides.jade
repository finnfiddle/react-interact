extends ./includes/layout.jade

block navbar
  +navbar
  
block content      
  
  .row
    +menu
          
    .col-md-9
      .page-header
        h1 Getting Started
        
        
      #installation
      h2 Installation
      pre
        code.shell npm install react-interact
        
      #containers
        +space
      h2 Containers
      p Containers are higher-order components that communicate with the backend to fetch and mutate data. They pass the data to the wrapped component as props. And they can be configured in various ways so that they know how and where to perform certain CRUD operations.
      
      h3 Example
      .row
        .col-xs-12
          pre
            code.javascript
              :escape
                import React, { Component } from 'react'
                import { createContainer } from 'react-interact'

                class TodoList extends Component {

                  render() {
                    return <div>
                      {this.props.todos.map(todo => `${todo.title}, `)}
                    </div>
                  },
                  
                }

                export default createContainer(TodoList, () => ({
                  todos: '/api/v1/todos',
                }))
                
          h4 Network request
          pre
            code GET /api/v1/todos
              
          h4 Response
          pre
            code.
              [
                {id: 1, title: 'Laundry'},
                {id: 2, title: 'Weights'},
                {id: 3, title: 'Stroke the cat'},
              ]
          
          h4 Result
          p Laundry, Weights, Stroke the cat,
          
      +space
      a.btn.btn-md.btn-primary(href=uri_prefix+"/guides_containers.html") Containers in Depth
      
      #mutations
        +space
      h2 Mutations
      
      p Fetching data from the server is an important first step but what do we do about mutating data on the server. For example creating new documents/items or udpating and deleting existing ones.
      
      p Interact makes mutations easy by providing wrapped components with an  
        code interact
        | &nbsp;function prop that can be used to send requests to the backend.
        
      h3 Example
      
      pre
        code.javascript
          :escape
            import React, { Component } from 'react'
            import { createContainer } from 'react-interact'

            class TodoList extends Component {

              render() {
                return (
                  <div>
                    {this.props.todos.map(todo => `${todo.title}, `)}
                    <a onClick={this.handleAddTodo.bind(this)}>Add Todo</a>
                  </div>
                )
              },

              handleAddTodo() {
                this.props.interact.todos.create({})
              },
            }

            export default createContainer(TodoList, () => ({
              todos: '/api/v1/todos',
            }))
      
      +space
      a.btn.btn-md.btn-primary(href=uri_prefix+"/guides_mutations.html") Mutations in Depth
      
      #subresources
        +space
      h2 Subresources
      
      p Resources that we defined in our containers can also have subresources.
      
      h3 Basic Example
      
      pre
        code.javascript
          :escape
            import React, { Component } from 'react'
            import { createContainer } from 'react-interact'

            class TodoList extends Component {

              render() {
                return (
                  <ul>
                    {this.props.todos.map(todo => (
                      <li key={todo.id}>
                        {todo.title}
                        <ul>
                          {todo.subTodos.map(subTodo => (
                            <li key={subTodo.id}>{subTodo.title}</li>
                          ))}
                        </ul>
                        <a 
                          onClick={this.handleAddSubTodo.bind(this, todo.id)}
                        >
                          Add SubTodo
                        </a>
                      </li>
                    )}
                  </ul>
                )
              },

              handleAddSubTodo(id) {
                this.props.interact.todos(id).subTodos.create({})
              },
            }

            export default createContainer(TodoList, ({ id }) => ({
              todos: {
                base: '/api/v1/todos',
                item: `/${id}`,
                subs: ({ id }) => ({
                  subTodos: {
                    base: '/sub_todos',
                    item: `/${id}`,
                  },
                }),
              },
            }))
      
      
      +space
      a.btn.btn-md.btn-primary(href=uri_prefix+"/guides_subresources.html") Subresources in Depth
      
      #custom_agents
        +space
      h2 Custom Agents/Interfaces
      p By default Interact sends HTTP requests using 
        a(target="_blank" href="https://visionmedia.github.io/superagent/") Superagent
        | &nbsp;under the hood but if for example you wish to provide offline-first functionality for your app or you wish to use a different protocol to HTTP you can pass a custom agent/interface to your container that will be the bridge between the frontend and the backend. 
      
      p This would enable you to use alternatives like PouchDB for example or WebSockets.
      
      p More info coming soon... See the defaultAgent in the source if you wish to understand better in the meantime.
      //- h3 Example
      
      //- +space
      //- a.btn.btn-md.btn-primary(href=uri_prefix+"/.html") Custom Agents in Depth
      
      +space
      +space
      +space
      
